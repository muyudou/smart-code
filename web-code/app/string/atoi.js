/**
 * 请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：

如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0 。

注意：

本题中的空白字符只包括空格字符 ' ' 。
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  231 − 1 或 −231 。
输入: "42"
输出: 42

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。

     输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。
0 <= s.length <= 200
s 由英文字母（大写和小写）、数字、' '、'+'、'-' 和 '.' 组成
 */
var myAtoi = function(s) {
    const arr = s.split('');
    const MAX = Math.pow(2, 31) - 1;
    const MIN = Math.pow(-2, 31);
    let sum = 0;
    let flag = 1;
    let index = 0;
    // 跳过空格
    while (arr[index] === ' ') {
        index++;
    }
    // 符号标志位设置
    if (arr[index] === '-') {
        flag = -1;
    }
    // + - 号索引增加
    if (arr[index] === '-' || arr[index] === '+') {
        index++;
    }
    for (let i = index; i < arr.length; i++) {     
        if (!/\d/.test(arr[i])) { // 非数字直接跳出
            break;
        }
        let num = parseInt(arr[i], 10);
        sum = sum * 10 + num;
    }
    sum *= flag;
    console.log(sum, flag);
    if (sum > MAX) {
        return MAX;
    }
    if (sum < MIN) {
        return MIN;
    }
    return sum;
};

myAtoi('42');
myAtoi('    42');
myAtoi('    -42');
myAtoi('4193 with words')
myAtoi('words and 987');
myAtoi('-91283472332');
myAtoi('+-12');
myAtoi("  -0012a42")